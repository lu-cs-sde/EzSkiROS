Timestamp,How often do you work on SkillDescriptions?,"When programming a SkillDescription, how often do you run into bugs?","When programming with SkiROS, how often do you run into broken SkillDescriptions?","Would EZskiROS have helped you?
Why or Why not?","Were you familiar with the Python features that EZskiROS uses? (e.g., type annotations in Python)",Do you feel that it is easier to read skill descriptions with  EZskiROS?,Do you feel that it is easier to modify skill descriptions with  EZskiROS?,Do you feel that it is easier to write new skill descriptions with  EZskiROS?,Any further comments about coding with EZskiROS?,Do you see particular benefits or concerns about adopting EZskiROS in your work? ,"Do you see particular benefits or concerns about beginners (e.g., new employees or M.Sc. students doing project work) adopting EZskiROS ","What, if anything would you like to change? ","What checks, if any, would you like to add? ","What other parts of SkiROS, if any, do you believe would benefit from similar checking? "
1/13/2023 11:27:26,A few times a year,5,4,"I think so. Not because of the syntax (even though it looks nice), but because of the error reporting.
In my experience, SkiROS's error messages are terrible, and half of the time they're not even the correct error messages (i.e. they don't point me to the correct cause),
so I think the improved error reporting will be extremely useful.",3,5,5,5,,The error reporting will likely make all my SkiROS work significantly easier,"In addition to the error reporting, it seems significantly easier for a beginner to learn this syntax, particularly because it looks more like ""standard"" OOP","If I understand correctly, the object relations are compiled from the SkiROS ontology?
In that case I think it would be great to have an easier way of defining relations, as I'm not a fan of the SkiROS ontology...",It would be really cool to have checks that the pre/post-conditions leave the world model in a consistent state. For example it could warn if an object has more than one at-relation.,Skill implementations. For example you could integrate skill implementations with the skill descriptions to make sure that skills are being used with the correct type of arguments.
1/13/2023 15:28:04,I am quite a new user of skiros. I began to use it 1 month ago. ,4,4,"Yes I think it would have helped me. As a new user, I was loosing a lot of time to read and understand the relations.  ",2,5,5,5,Looking forward to use it ,"*It makes the skillDescrition more readable and understandable at first sight. 
*The fact that the strings are replaced by instances will resolve the fact that inferred parameters are mixed up if they have the same name in different skills. ","As I said, I am myself a new user. The main benefit I see is that it makes it easier to read and understand the relation conditions. ",I don't know yet since I didn't use it. ,/,The fact that post-conditions and hold-conditions are not checked makes the execution of a skill in sequence impossible if pre-conditions have inferred parameters.  
1/13/2023 15:37:28,"We work with SkiROS skills on a weekly basis, but do not define new SkillDescriptions very regularly. The skills of our main application are defined before, so if we work on SkillDescriptions it is rather sporadically to add parameters, change parameter names or try to find workarounds for issues that we face. Lately we are also doing some trial-an-error on how to properly implement conditions in our case.",2,3,"I think that for new users it might be more intuitive to define a skill format. Myself, I am quite  confident with using the existing syntax so for me it won't directly improve my experience, but I'm quite sure it will for new learners. What might help me is that parameters and conditions are not defined based on string labels anymore, and have some kind of ID in the background (or that's what I understood) which might solve some of the limitations we meet currently.",5,5,4,4,"There must be a guide to let users know what is actually available to use in a skill description. In the existing framework, we found out about the available parameter types - and recently about parameter options - by digging through the source code (Required, Optional, Inferred, Consume, Unspecify). New users would greatly benefit from a description about the available tools and a guide on the syntax to use them.","Sure, I'm convinced that any update on the SkiROS framework reflects in improvements in our research cases and demonstrators. ","It's quite a learning curve and need some courage to start learning from the beginning autonomously. For basic features I was able to learn from the example applications, both speaking about syntax and knowing what is actually available, some other features I needed to dig up from the source code.","About generalization of parameter definition: https://github.com/RVMI/skiros2/issues/52. We still did not find a way to properly implement this, apart from explicitly defining unique parameter labels. This becomes a problem if you want to share generic labels like for instance 'container' instead of explicitly needing to append the parameter labels with something unique like 'container_place', 'container_pick' ","During skill execution, check if the conditions still hold. Currently only pre-conditions are evaluated which is only done before skill execution. In high-level skills we might want to re-evaluate during skill, for example in a skill that picks objects out of a bin until it is empty. Such a skill would need to trigger a pick-and-place skill multiple times in sequence while re-parametrizing the parameters each iteration.",
1/13/2023 16:33:16,Typically in bulk whenever a new functionality needs to be implemented. Maybe around 50 times a year?,4,4,Yes. It would have saved me from some typos & copy-paste errors. The mapping of the ontology to python types is useful and reduces the amounts of lookups I need to do in the ontology.,3,5,5,4,"When working with larger skills that have many preconditions, it can be difficult to keep an overview. In the old way the comment field helped since the actual precondition was difficult to read. But it feels to me that with the new changes it would not be necessary.","It is easier to formulate pre- and post-conditions and they are much easier to read. The extra checks allow to know some mistakes before the robot is started.

I do not see disadvantages right now. I am wondering how property conditions would look like in this DSL.","I think it provides an easier entry hurdle. 

One thing that could be tackled with tooling is that now some checks happen during the startup of the whole robot, which typically produces hundreds of lines of logs. Sometimes people have difficulties filtering these for error messages. But I think it would be possible to create a separate launch file to just check the skills.",Nothing that I am aware of,,To have similar tooling inside a skill in the implementation could also be useful.
1/13/2023 17:00:39,Once or twice a month,5,5,"Yes. Some reasons:
1. Easy format and static checks for the data types
2. Pre and post conditions are easy to make sense
3. Tighter integration based on the ontologies",4,5,5,5,One minor comment: Pre and post conditions should be a set not a list. It would allow to do set operations plus remove redundant conditions,"Benefits:
1. Saves coding time and effort

Don't see any visible concerns for adopting EZskiROS in my work",I think it would actually help the beginners to get to know and learn skiROS,"I would not like to change anything. Instead I would like it to have more features. 
One important feature is how one skill changes the world. In current implementation of skiROS, one needs to do a lot of book-keeping in the form pre- and post-conditions. It would probably be nice to have few of these conditions and indirect changes or effects as a result of these conditions",Access to turtle file and checking if the particular instance of the world model is as it is supposed to be. ,Skill implementation
1/13/2023 19:16:31,daily working,3,3,"Yes, it could definited help during the programming phase. The bug is going to be more easier to find out.",4,2,3,4,,Not in my current work but it may be useful when works on a complete new work from the beigining.,"If with detailed documentation, yes.",,,
1/20/2023 13:45:28,"A lot, a while ago :)",4,4,Yes because type checking and early bug retrieval is fundamental to program faster and feel safer to make changes,5,5,4,5,Syntaxt could be simplified even more(like not adding postconditions with +=),"Type checking brings the common advantages and disadvantages of it (e.g. forces to define any new property before hand, etc.)",It will be easier and safer for them to work with it,,,"The definition of compound skills is prone to error (even more than the skill descriptions itself). There are several things to check there, the top concern is checking that parameters remappings make sense or are clashing. That is the 1st most common error and also most difficult to debug because has unpredictable effects"